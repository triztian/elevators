{"version":3,"sources":["Api.js","CallButton.js","FloorSelector.js","ControlPanel.js","Floor.js","Elevator.js","serviceWorker.js","index.js","App.js"],"names":["api","fetch","mode","then","r","json","id","endpoint","from","to","Number","isInteger","parseInt","Error","undefined","concat","method","elevatorID","onUpdate","startsWith","substring","Promise","resolve","reject","ws","WebSocket","stop","close","onopen","onerror","err","onmessage","evt","elevator","JSON","parse","data","console","log","CallButton","props","react_default","a","createElement","className","type","value","floorNumber","onClick","onCallElevator","target","FloorSelector","_useState","useState","selectedFloor","_useState2","Object","slicedToArray","setSelectedFloor","htmlFor","onChange","e","onSelectFloor","floors","map","f","key","number","name","noneSelectedFloor","ControlPanel","destFloor","setDestFloor","debug","FloorSelector_FloorSelector","CallButton_CallButton","ElevatorAPI","callElevator","resp","catch","error","Floor","floorName","ControlPanel_ControlPanel","Elevator","setFloorNumber","useEffect","getElevator","elev","currentFloor","watchElevator","status","slots","Boolean","window","location","hostname","match","ReactDOM","render","setFloors","listFloors","reverse","floor","Floor_Floor","toConsumableArray","Array","keys","n","Elevator_Elevator","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53884e12.chunk.js","sourcesContent":["/**\n * \n */\nclass ElevatorAPI {\n\n\t/**\n\t * Returns a promise that when resolved contains an array of the \n\t * the floors.\n\t */\n\tasync listFloors() {\n\t\tconst endpoint = `https://mcmelevators.herokuapp.com/floors`\n\t\treturn fetch(endpoint, {mode: 'cors'}).then(r => r.json());\n\t}\n\n\t/**\n\t * Fetch the status of an elevator.\n\t */\n\tasync getElevator(id) {\n\t\tconst endpoint = `http://mcmelevators.herokuapp.com/elevator/${id}`;\n\t\treturn fetch(endpoint, {mode: 'cors'}).then(r => r.json());\n\t}\n\n\t/**\n\t * @param {number} from The floor to which the elevator is being called from.\n\t * @param {number} to An optional destionation floor.\n\t */\n\tasync callElevator(from, to) {\n\n\t\tif (!Number.isInteger(parseInt(from))) {\n\t\t\treturn new Error(\"from argument must be a valid number\");\n\t\t}\n\n\t\tlet endpoint = `http://mcmelevators.herokuapp.com/floor/${from}`;\n\n\t\tif (to !== null && to !== undefined && Number.isInteger(parseInt(to))) {\n\t\t\tendpoint += `/to/${to}`\n\t\t}\n\t\t\n\t\treturn fetch(endpoint, { \n\t\t\tmethod: 'POST',\n\t\t\tmode: 'cors'\n\t\t}).then(r => r.json());\n\n\t}\n\n\t/**\n\t * Will watch updates to a specific elevator, and when an update\n\t * happens it will call the `onUpdate` function.\n\t * @param {*} onUpdate The function to be called on any message\n\t */\n\twatchElevator(elevatorID, onUpdate) {\n\n\t\tlet id = elevatorID;\n\t\tif (elevatorID.startsWith('E')) {\n\t\t\tid = elevatorID.substring(1);\n\t\t}\n\n\t\tconst endpoint = `ws://mcmelevators.herokuapp.com/elevator/${id}/updates`;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet ws = new WebSocket(endpoint, '*');\n\n\t\t\tconst stop = () => {\n\t\t\t\tws.close()\n\t\t\t}\n\n\t\t\tws.onopen = () => {\n\t\t\t\tresolve(stop);\n\t\t\t}\n\n\t\t\tws.onerror = err => {\n\t\t\t\treject(err);\n\t\t\t}\n\n\t\t\tws.onmessage = evt => {\n\n\t\t\t\tlet elevator = JSON.parse(evt.data);\n\n\t\t\t\tconsole.log(\"api.watchElevator\", elevator);\n\n\t\t\t\t// FIXME: This filtering should happen on the server.\n\t\t\t\tif (`E${id}` === elevator.id) {\n\t\t\t\t\tonUpdate(elevator);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nlet api = new ElevatorAPI();\n\nexport default api;","import React from 'react';\n\nimport './css/CallButton.css'\n\nexport default function CallButton(props) {\n\n\tconst onClick = (evt) => {\n\t\tprops.onCallElevator(evt.target.value);\n\t}\n\n\treturn (\n\t\t<div className=\"CallButton\">\n\t\t\t<button \n\t\t\t\ttype=\"button\" \n\t\t\t\tvalue={props.floorNumber}\n\t\t\t\tonClick={onClick}\n\t\t\t>Call</button>\n\t\t</div>\n\t)\n}","import React, {useState} from 'react'\nimport './css/FloorSelector.css'\n\nexport default function FloorSelector(props) {\n\n\tconst [selectedFloor, setSelectedFloor] = useState(props.selectedFloor);\n\n\tconst onChange = e => {\n\t\tsetSelectedFloor(e.target.value);\n\t\tprops.onSelectFloor(e.target.value);\n\t}\n\n\treturn (\n\t\t<div className=\"FloorSelector\">\n\t\t\t<label htmlFor={`FS${props.floorNumber}`}>Destination</label>\n\t\t\t<select id={`FS${props.floorNumber}`} onChange={onChange} value={selectedFloor}>\n\t\t\t\t<option value=\"-1\">None</option>\n\t\t\t\t{props.floors.map(f => {\n\t\t\t\t\treturn (<option key={`fo${f.number}`} value={f.number}>{f.name}</option>);\n\t\t\t\t})}\n\t\t\t</select>\n\t\t</div>\n\t);\n}","import React, {useState} from 'react';\n\nimport CallButton from './CallButton'\nimport FloorSelector from './FloorSelector'\nimport './css/ControlPanel.css'\n\nimport ElevatorAPI from './Api'\n\nconst noneSelectedFloor = -1;\n\nexport default function ControlPanel(props) {\n\n\tconst [destFloor, setDestFloor] = useState(null);\n\n\tconst onCallElevator = () => {\n\n\t\tlet from = props.floorNumber\n\t\tlet to = destFloor;\n\n\t\tconsole.log('Elevator called: from: ', from, 'to: ', to)\n\n\t\tElevatorAPI.callElevator(from, to).then((resp) => {\n\t\t\tconsole.log('onCallElevator: success: ', resp);\n\t\t}).catch(err => {\n\t\t\tconsole.error('onCallElevator: ', err);\n\t\t});\n\n\t}\n\n\treturn (\n\t\t<div className={props.debug ? 'ControlPanel debug' : 'ControlPanel'}>\n\t\t\t<FloorSelector \n\t\t\t\tfloorNumber={props.floorNumber} \n\t\t\t\tfloors={props.floors}\n\t\t\t\tselectedFloor={noneSelectedFloor}\n\t\t\t\tonSelectFloor={setDestFloor}\n\t\t\t\tdebug={props.debug}\n\t\t\t/> \n\t\t\t<CallButton \n\t\t\t\tfloorNumber={props.floorNumber} \n\t\t\t\tonCallElevator={onCallElevator}\n\t\t\t\tdebug={props.debug}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React from 'react'\n\nimport ControlPanel from \"./ControlPanel\";\n\nimport './css/Floor.css'\n\nexport default function Floor(props) {\n\n\treturn (\n\t\t<div className={props.debug ? 'Floor debug': 'Floor'}>\n\t\t\t<div className={props.debug ? 'Floor-Name debug' : \"Floor-Name\"}>\n\t\t\t\t<h4>{props.floorName}</h4>\n\t\t\t</div>\n\t\t\t<ControlPanel \n\t\t\t\tdebug={props.debug}\n\t\t\t\tfloors={props.floors}\n\t\t\t\tfloorNumber={props.floorNumber}/>\n\t\t</div>\n\t)\n}","import React, {useEffect, useState} from 'react'\n\nimport ElevatorAPI from './Api'\nimport './css/Elevator.css'\n\n/**\n * \n * @param {*} props \n */\nexport default function Elevator(props) {\n\n\tconst [floorNumber, setFloorNumber] = useState(0);\n\n\tuseEffect(() => {\n\t\tElevatorAPI.getElevator(props.elevatorID).then(elev => {\n\t\t\tsetFloorNumber(elev.currentFloor.number);\n\t\t}).catch(err => {\n\t\t\tconsole.error('getElevator: ', err);\n\t\t});\n\n\t}, [props.elevatorID]);\n\n\tuseEffect(() => {\n\t\tElevatorAPI.watchElevator('E'+props.elevatorID, (status) => {\n\t\t\tconsole.log('watchElevator: ', status);\n\t\t\tsetFloorNumber(status.currentFloor.number);\n\t\t}).then((elevatorID) => {\n\t\t\tconsole.log('watching elevator: ', elevatorID);\n\t\t}).catch(err => {\n\t\t\tconsole.error('watchElevator: ', err);\n\t\t});\n\t}, [props.elevatorID]);\n\n\tlet slots = props.floors.map(f => {\n\t\tif (floorNumber === f.number) {\n\t\t\treturn (\n\t\t\t\t<div id={`EF${f.number}`} className={props.debug ? 'Elevator debug': 'Elevator'} key={f.number}>\n\t\t\t\t\t<h4>E{props.elevatorID}</h4>\n\t\t\t\t\t<h6>Floor {floorNumber}</h6>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn <div id={`EF${f.number}`} className={props.debug ? 'Elevator-Stub debug':'Elevator-Stub'} key={f.number}></div>\n\t});\n\n\treturn (\n\t\t<div className={props.debug ? \"Elevator-Line debug\" : \"Elevator-Line\"}>\n\t\t\t{slots}\n\t\t</div>\n\t)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useEffect, useState} from 'react';\nimport './css/App.css';\n\nimport ElevatorAPI from './Api'\n\nimport Floor from './Floor'\nimport Elevator from './Elevator'\n\nexport default function App() {\n\t\n\tconst [floors, setFloors] = useState([]);\n\n\tconst debug = false;\n\t\n\tuseEffect(() => {\n\n\t\tElevatorAPI.listFloors()\n\t\t\t.then(setFloors)\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error('listFloors: ', err)\n\t\t\t});\n\t}, []);\n\t\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"App-Header\">Elevator</h1>\n\t\t\t<div className=\"Building\">\n\t\t\t\t<div className=\"Floors\">{floors.reverse().map(floor => \n\t\t\t\t\t<Floor key={`f${floor.number}`} floors={floors} floorName={floor.name} floorNumber={floor.number} debug={debug}/>\n\t\t\t\t)}</div>\n\t\t\t\t<div className={debug ? 'Elevators debug': 'Elevators'}>\n\t\t\t\t\t{/* 3 elevator lines */}\n\t\t\t\t\t{[...Array(3).keys()].map(n =>\n\t\t\t\t\t\t\t<Elevator key={'E'+n} elevatorID={n} debug={debug} floors={floors}/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}"],"sourceRoot":""}